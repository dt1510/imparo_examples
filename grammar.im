%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Grammar learning problem. 
% Learns s/2, a simple English language phrase grammar.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% These parameters can be varied to control the form of the hypotheses learned.
:-set_max_clause_length(6).
:-set_max_clauses(1).
:-set_connected(0).
:-set_max_var_depth(4).

head_modes([
    s(+wlist,-wlist),
    np(+wlist,-wlist),
    vp(+wlist,-wlist),
    det([#word|+wlist],-wlist),
    adj([#word|+wlist],-wlist),
    noun([#word|+wlist],-wlist),
    verb([#word|+wlist],-wlist),
    prep([#word|+wlist],-wlist)
]).

body_modes([
    det(+wlist,-wlist),
    adj(+wlist,-wlist),
    np(+wlist,-wlist),
    vp(+wlist,-wlist),
    prep(+wlist,-wlist),
    noun(+wlist,-wlist),
    verb(+wlist,-wlist)
]).

%%%%%%%%%%%%%%%%%%%%
% Types

word(W) :- atom(W).

wlist([]).
wlist([W|Rest]) :- word(W), wlist(Rest).


% Syntactic constraints on clause form

skip_solution(S):-          % All head variables must appear in body.
        \+ generative(S).

generative([Head]):- 
        !,
        term_variables(Head,Vars),
        \+ (member(V,Vars),
            occurrences_of_var(V,Head,1)).
            
generative([Head|Body]):-
        Body \== [],
        \+ (member(A1,[Head|Body]),
            term_variables(A1,A1Vars),
            member(X,A1Vars),
            \+ (member(A2,[Head|Body]),
                A1 \== A2,
                term_variables(A2,A2Vars),
                member(Y,A2Vars),
                X==Y)
            ).

prune(Hypothesis) :-                 % Terminals must be unit clauses and generative
        member([det(A,B)|Body],Hypothesis),
        (Body \== [] ; \+ generative([det(A,B)])).
prune(Hypothesis) :- 
        member([adj(A,B)|Body],Hypothesis),
        (Body \== [] ; \+ generative([adj(A,B)])).
prune(Hypothesis) :- 
        member([noun(A,B)|Body],Hypothesis),
        (Body \== [] ; \+ generative([noun(A,B)])).
prune(Hypothesis) :- 
        member([verb(A,B)|Body],Hypothesis),
        (Body \== [] ; \+ generative([verb(A,B)])).
prune(Hypothesis) :- 
        member([prep(A,B)|Body],Hypothesis),
        (Body \== [] ; \+ generative([prep(A,B)])).
prune(Hypothesis) :- 
        member([Head|Body],Hypothesis),
        Body \== [], 
        last([Head|Body1],Last,[Head|Body]),
        term_variables_bag(Last,[In,_]),
        \+ (
            (
                term_variables_bag(Head,[HIn,_]),
                HIn == In
            )
            ;
            (
                member(Atom,Body1),
                term_variables_bag(Atom,[_,AtOut]),
                In == AtOut
            )
        ).
        
prune(Hypothesis) :- 
    member([Head|Body],Hypothesis),
    member(Head,Body).	                    % Self-recursion banned
prune(Hypothesis) :- 
    member([Head|Body],Hypothesis),         % Mutual recursion depth 1
	member(Atom,Body), 
	((rule((Atom:-Body1)),
	 convert_to_list(Body1,B1List),
	 member(Head,B1List)
	 )
	;
	 (member([Atom|Body2],Hypothesis),
	  member(Head,Body2)
	 )
	).

%prune(Head,Body) :-			% Mutual recursion depth 2
%	in(Atom1,Body), clause(Atom1,Body1),
%	in(Atom2,Body1), clause(Atom2,Body2),
%	in(Head,Body2).


%% Domain predicates for abducibles

domain(s(A,B)) :- ground(A),proper_suffix(A,B).	% All are suffix of ground input word-list
domain(np(A,B)) :- ground(A),proper_suffix(A,B).
domain(vp(A,B)) :- ground(A),proper_suffix(A,B).
domain(det(A,B)) :- ground(A),tail(A,B).
domain(adj(A,B)) :- ground(A),tail(A,B).
domain(prep(A,B)) :- ground(A),tail(A,B).
domain(noun(A,B)) :- ground(A),tail(A,B).
domain(verb(A,B)) :- ground(A),tail(A,B).

%file%imb
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A simple English language grammar
% Background knowledge
% Comment out part of the program before running Imparo.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

s(S1,S2) :- np(S1,S3), vp(S3,S4), np(S4,S2).
s(S1,S2) :- np(S1,S3), vp(S3,S4), np(S4,S5), prep(S5,S6), np(S6,S2).

np(S1,S2) :- det(S1,S3), noun(S3,S2).
np(S1,S2) :- det(S1,S3), adj(S3,S4), noun(S4,S2).

det([a|S],S).
det([the|S],S).

adj([big|S],S).
adj([small|S],S).
adj([nasty|S],S).

vp(S1,S2) :- verb(S1,S2).
vp(S1,S2) :- verb(S1,S3), prep(S3,S2).

noun([man|S],S).
noun([dog|S],S).
noun([house|S],S).
noun([ball|S],S).

verb([takes|S],S).
verb([walks|S],S).
verb([hits|S],S).
verb([likes|S],S).

prep([at|S],S).
prep([to|S],S).
prep([on|S],S).
prep([in|S],S).
prep([into|S],S).
%file%imx
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A simple English language grammar
% Examples
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

s([the,dog,takes,the,ball,to,the,man],[]).
s([the,small,dog,walks,on,the,house],[]).
s([the,dog,takes,the,ball,to,the,house],[]).
:- s([the,dog],[]).
:- s([the,the,house,dog,on,walks],[]).
s([the,small,dog,walks,into,the,house],[]).
s([a,dog,hits,a,ball],[]).
:- s([ball,dog,the,the,takes,man,the,to],[]).
:- s([the,hits,at,man,the,ball],[]).
s([the,big,man,hits,at,the,ball],[]).
s([the,man,hits,the,ball,to,the,dog],[]).
s([the,man,walks,into,the,house],[]).
s([the,man,hits,the,ball,at,the,house],[]).
s([a,man,hits,the,ball,at,the,dog],[]).
s([a,ball,hits,the,small,dog],[]).
:- s([dog,the,man,the,walks],[]).
:- s([dog,small,hits,a,ball,the],[]).
:- s([the,the,big,hits,dog,man],[]).
s([a,ball,hits,the,dog],[]).
:- s([the,man,dog,hits,nasty,the],[]).
s([a,man,takes,the,ball,to,the,house],[]).
:- s([the,hits,small,the,dog,man],[]).
:- s([at,hits,the,the,man,big,ball],[]).
s([the,nasty,man,hits,the,dog],[]).
:- s([dog,the,the,walks,to,man],[]).
:- s([the,house,the,dog,walks,into,small],[]).
s([the,man,hits,at,the,ball],[]).
s([the,small,man,hits,the,dog],[]).
:- s([in,the,house,the,walks,man],[]).
:- s([the,man,the,hits,house,ball,at,the],[]).
s([the,man,takes,the,dog,to,the,ball],[]).
s([the,dog,walks,on,the,house],[]).
:- s([man,the,hits,the,dog],[]).
s([the,big,man,hits,the,dog],[]).
s([the,dog,walks,to,the,man],[]).
:- s([to,takes,the,man,a,ball,the,house],[]).
:- s([to,the,house,walks,the,dog],[]).
:- s([a,man,walks,the,walks],[]).
:- s([the,dog,takes,the,the,man,to,ball],[]).
s([the,small,dog,walks,in,the,house],[]).
:- s([the,man,the,house,into,walks],[]).
:- s([hits,the,at,ball,dog,man,a,the],[]).
:- s([a,dog,walks,the],[]).
:- s([ball,a,dog,a,hits],[]).
s([the,man,walks,in,the,house],[]).
s([the,man,walks,the,dog],[]).
s([the,man,hits,the,nasty,dog],[]).
:- s([dog,the,the,to,takes,ball,house,the],[]).
:- s([the,the,walks,on,dog,house,small],[]).
s([the,man,hits,the,dog],[]).
